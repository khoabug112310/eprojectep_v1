import { useState, useEffect } from 'react'
import { Link, useSearchParams } from 'react-router-dom'
import api from '../../services/api'
import './Auth.css'

export default function ResetPassword() {
  const [searchParams] = useSearchParams()
  const token = searchParams.get('token')
  
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const [success, setSuccess] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [tokenValid, setTokenValid] = useState<boolean | null>(null)

  useEffect(() => {
    if (!token) {
      setError('Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá')
      setTokenValid(false)
      return
    }

    // Validate token
    validateToken()
  }, [token])

  const validateToken = async () => {
    try {
      await api.post('/auth/validate-reset-token', { token })
      setTokenValid(true)
    } catch (err: any) {
      setError('Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá')
      setTokenValid(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (password !== confirmPassword) {
      setError('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp')
      return
    }

    if (password.length < 6) {
      setError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±')
      return
    }

    setLoading(true)
    setError(null)

    try {
      await api.post('/auth/reset-password', {
        token,
        password,
        password_confirmation: confirmPassword
      })
      setSuccess(true)
    } catch (err: any) {
      setError(err.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.')
    } finally {
      setLoading(false)
    }
  }

  if (tokenValid === false) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <h1>‚ö†Ô∏è Link kh√¥ng h·ª£p l·ªá</h1>
            <p>Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá</p>
          </div>
          
          <div className="error-message">
            <div className="error-icon">‚ùå</div>
            <p>{error}</p>
          </div>

          <div className="auth-actions">
            <Link to="/forgot-password" className="btn btn-primary">
              Y√™u c·∫ßu link m·ªõi
            </Link>
            <Link to="/login" className="btn btn-secondary">
              Quay l·∫°i ƒëƒÉng nh·∫≠p
            </Link>
          </div>
        </div>
      </div>
    )
  }

  if (success) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <h1>‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng</h1>
            <p>M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t</p>
          </div>
          
          <div className="success-message">
            <div className="success-icon">üéâ</div>
            <p>B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng m·∫≠t kh·∫©u m·ªõi ƒë·ªÉ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n</p>
          </div>

          <div className="auth-actions">
            <Link to="/login" className="btn btn-primary">
              ƒêƒÉng nh·∫≠p ngay
            </Link>
          </div>
        </div>
      </div>
    )
  }

  if (tokenValid === null) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <h1>‚è≥ ƒêang x√°c th·ª±c...</h1>
            <p>Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
          </div>
          
          <div className="loading-spinner">
            <div className="spinner"></div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="auth-container">
      <div className="auth-card">
        <div className="auth-header">
          <h1>üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
          <p>Nh·∫≠p m·∫≠t kh·∫©u m·ªõi cho t√†i kho·∫£n c·ªßa b·∫°n</p>
        </div>

        <form onSubmit={handleSubmit} className="auth-form">
          <div className="form-group">
            <label htmlFor="password">M·∫≠t kh·∫©u m·ªõi</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
              required
              minLength={6}
              className="form-input"
            />
            <small className="form-hint">M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±</small>
          </div>

          <div className="form-group">
            <label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
            <input
              type="password"
              id="confirmPassword"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
              required
              className="form-input"
            />
          </div>

          {error && (
            <div className="error-message">
              <div className="error-icon">‚ö†Ô∏è</div>
              <span>{error}</span>
            </div>
          )}

          <button 
            type="submit" 
            className="btn btn-primary btn-full"
            disabled={loading || !password || !confirmPassword}
          >
            {loading ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t m·∫≠t kh·∫©u'}
          </button>
        </form>

        <div className="auth-footer">
          <p>
            Nh·ªõ m·∫≠t kh·∫©u? <Link to="/login">ƒêƒÉng nh·∫≠p</Link>
          </p>
        </div>
      </div>
    </div>
  )
} 