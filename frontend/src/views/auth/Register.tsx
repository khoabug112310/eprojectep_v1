import { useState } from 'react'
import { useNavigate, Link } from 'react-router-dom'
import api from '../../services/api'
import './Auth.css'

export default function Register() {
  const navigate = useNavigate()
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    password: '',
    password_confirmation: '',
  })
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [loading, setLoading] = useState(false)

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!formData.name) {
      newErrors.name = 'H·ªç t√™n l√† b·∫Øt bu·ªôc'
    }

    if (!formData.email) {
      newErrors.email = 'Email l√† b·∫Øt bu·ªôc'
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email kh√¥ng h·ª£p l·ªá'
    }

    if (!formData.phone) {
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc'
    } else if (!/^[0-9]{10,11}$/.test(formData.phone)) {
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá'
    }

    if (!formData.password) {
      newErrors.password = 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc'
    } else if (formData.password.length < 8) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±'
    }

    if (!formData.password_confirmation) {
      newErrors.password_confirmation = 'X√°c nh·∫≠n m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc'
    } else if (formData.password !== formData.password_confirmation) {
      newErrors.password_confirmation = 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) return

    setLoading(true)
    try {
      const response = await api.post('/auth/register', formData)
      const { token, user } = response.data.data
      
      // Save token to localStorage
      localStorage.setItem('token', token)
      localStorage.setItem('user', JSON.stringify(user))
      
      // Update API client with token
      api.defaults.headers.common['Authorization'] = `Bearer ${token}`
      
      navigate('/')
    } catch (error: any) {
      if (error.response?.data?.errors) {
        const apiErrors = error.response.data.errors
        const newErrors: Record<string, string> = {}
        
        Object.keys(apiErrors).forEach(key => {
          newErrors[key] = apiErrors[key][0]
        })
        
        setErrors(newErrors)
      } else if (error.response?.data?.message) {
        setErrors({ general: error.response.data.message })
      } else {
        setErrors({ general: 'ƒêƒÉng k√Ω th·∫•t b·∫°i' })
      }
    } finally {
      setLoading(false)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }))
    }
  }

  return (
    <div className="auth-page">
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <div className="auth-icon">üìù</div>
            <h1 className="auth-title">ƒêƒÉng k√Ω</h1>
            <p className="auth-subtitle">T·∫°o t√†i kho·∫£n m·ªõi</p>
          </div>

          <form onSubmit={handleSubmit} className="auth-form">
            {errors.general && (
              <div className="error-message">
                <div className="error-icon">‚ö†Ô∏è</div>
                <p>{errors.general}</p>
              </div>
            )}

            <div className="form-group">
              <label htmlFor="name" className="form-label">H·ªç t√™n</label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className={`form-input ${errors.name ? 'error' : ''}`}
                placeholder="Nh·∫≠p h·ªç t√™n c·ªßa b·∫°n"
              />
              {errors.name && <span className="form-error"><span className="error-icon">‚ö†Ô∏è</span>{errors.name}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="email" className="form-label">Email</label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                className={`form-input ${errors.email ? 'error' : ''}`}
                placeholder="Nh·∫≠p email c·ªßa b·∫°n"
              />
              {errors.email && <span className="form-error"><span className="error-icon">‚ö†Ô∏è</span>{errors.email}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="phone" className="form-label">S·ªë ƒëi·ªán tho·∫°i</label>
              <input
                type="tel"
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleChange}
                className={`form-input ${errors.phone ? 'error' : ''}`}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
              />
              {errors.phone && <span className="form-error"><span className="error-icon">‚ö†Ô∏è</span>{errors.phone}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="password" className="form-label">M·∫≠t kh·∫©u</label>
              <input
                type="password"
                id="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                className={`form-input ${errors.password ? 'error' : ''}`}
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u (√≠t nh·∫•t 8 k√Ω t·ª±)"
              />
              {errors.password && <span className="form-error"><span className="error-icon">‚ö†Ô∏è</span>{errors.password}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="password_confirmation" className="form-label">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
              <input
                type="password"
                id="password_confirmation"
                name="password_confirmation"
                value={formData.password_confirmation}
                onChange={handleChange}
                className={`form-input ${errors.password_confirmation ? 'error' : ''}`}
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
              />
              {errors.password_confirmation && (
                <span className="form-error"><span className="error-icon">‚ö†Ô∏è</span>{errors.password_confirmation}</span>
              )}
            </div>

            <button type="submit" className="submit-btn" disabled={loading}>
              {loading && <div className="loading-spinner"></div>}
              {loading ? 'ƒêang ƒëƒÉng k√Ω...' : 'ƒêƒÉng k√Ω'}
            </button>
          </form>

          <div className="auth-footer">
            <p>
              ƒê√£ c√≥ t√†i kho·∫£n? <Link to="/auth/login" className="auth-link">ƒêƒÉng nh·∫≠p</Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  )
} 