# Security Scanning Workflow
# Dedicated workflow for comprehensive security scanning

name: Security Scan

on:
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
    paths:
      - 'frontend/package*.json'
      - 'backend/composer.json'
      - 'backend/composer.lock'
      - '.github/workflows/security-scan.yml'
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Frontend dependency audit
        working-directory: ./frontend
        run: |
          npm ci
          npm audit --audit-level high --production
          
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer:v2
      
      - name: Backend security check
        working-directory: ./backend
        run: |
          composer install --no-dev --optimize-autoloader
          composer require --dev enlightn/security-checker
          ./vendor/bin/security-checker security:check
      
      - name: Create security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Frontend Dependencies" >> security-report.md
          cd frontend && npm audit --json >> ../security-report.md || true
          cd ..
          echo "" >> security-report.md
          echo "## Backend Dependencies" >> security-report.md
          cd backend && ./vendor/bin/security-checker security:check --format=json >> ../security-report.md || true
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  code-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, php
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: ESLint Security Check
        working-directory: ./frontend
        run: |
          npm ci
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json -o eslint-report.json || true
          
      - name: Upload ESLint report
        uses: actions/upload-artifact@v3
        with:
          name: eslint-report
          path: frontend/eslint-report.json

  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build frontend image for scanning
        run: |
          docker build -t cinebook-frontend:scan ./frontend
      
      - name: Run Trivy scanner on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cinebook-frontend:scan'
          format: 'sarif'
          output: 'trivy-frontend.sarif'
      
      - name: Build backend image for scanning (if exists)
        run: |
          if [ -f "./backend/Dockerfile" ]; then
            docker build -t cinebook-backend:scan ./backend
          fi
      
      - name: Run Trivy scanner on backend image
        if: hashFiles('./backend/Dockerfile') != ''
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cinebook-backend:scan'
          format: 'sarif'
          output: 'trivy-backend.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-frontend.sarif'
      
      - name: Upload backend Trivy results
        if: hashFiles('./backend/Dockerfile') != ''
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-backend.sarif'

  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified