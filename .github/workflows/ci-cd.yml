# CineBook CI/CD Pipeline
# Comprehensive GitHub Actions workflow for automated testing, building, and deployment

name: CineBook CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
      - 'release/*'
    tags:
      - 'v*'
  pull_request:
    branches: 
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.1'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'cinebook'

jobs:
  # Frontend Testing and Building
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linting
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run type checking
        working-directory: ./frontend
        run: npm run build
      
      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:ci
        
      - name: Generate test coverage
        working-directory: ./frontend
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true
      
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: ./frontend/dist
          key: frontend-build-${{ github.sha }}

  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: cinebook_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo, pdo_mysql, redis, gd, zip
          coverage: xdebug
          tools: composer:v2
      
      - name: Copy environment file
        working-directory: ./backend
        run: cp .env.example .env
      
      - name: Install Composer dependencies
        working-directory: ./backend
        run: composer install --prefer-dist --no-interaction --optimize-autoloader
      
      - name: Generate application key
        working-directory: ./backend
        run: php artisan key:generate
      
      - name: Run database migrations
        working-directory: ./backend
        run: php artisan migrate --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: localhost
          DB_PORT: 3306
          DB_DATABASE: cinebook_test
          DB_USERNAME: root
          DB_PASSWORD: password
          REDIS_HOST: localhost
      
      - name: Seed database
        working-directory: ./backend
        run: php artisan db:seed
      
      - name: Run PHPUnit tests
        working-directory: ./backend
        run: ./vendor/bin/phpunit --coverage-clover=coverage.xml
      
      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Frontend dependency audit
        working-directory: ./frontend
        run: npm audit --audit-level high
      
      - name: Backend security check
        working-directory: ./backend
        run: |
          composer require --dev enlightn/security-checker
          ./vendor/bin/security-checker security:check

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan]
    if: github.event_name != 'pull_request'
    
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            VITE_ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
            VITE_APP_VERSION=${{ github.ref_type == 'tag' && github.ref_name || github.sha }}
      
      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
      
      - name: Deploy to staging server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/cinebook
            
            # Pull latest images
            docker-compose pull
            
            # Update environment variables
            echo "FRONTEND_IMAGE=${{ needs.build-images.outputs.frontend-image }}" > .env.deploy
            echo "BACKEND_IMAGE=${{ needs.build-images.outputs.backend-image }}" >> .env.deploy
            
            # Deploy with zero downtime
            docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d
            
            # Run migrations
            docker-compose exec -T backend php artisan migrate --force
            
            # Clear caches
            docker-compose exec -T backend php artisan cache:clear
            docker-compose exec -T backend php artisan config:cache
            
            # Health check
            ./scripts/health-check.sh
          EOF
      
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: 'üöÄ Staging deployment successful for commit ${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: '‚ùå Staging deployment failed for commit ${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
      
      - name: Create backup before deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/cinebook
            ./deploy.sh backup
          EOF
      
      - name: Deploy to production
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/cinebook
            
            # Set new image tags
            echo "FRONTEND_IMAGE=${{ needs.build-images.outputs.frontend-image }}" > .env.deploy
            echo "BACKEND_IMAGE=${{ needs.build-images.outputs.backend-image }}" >> .env.deploy
            
            # Deploy with backup and rollback capability
            ./deploy.sh deploy
          EOF
      
      - name: Production health check
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/cinebook
            ./deploy.sh health
          EOF
      
      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify production deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: 'üéâ Production deployment successful! Version: ${{ github.ref_name }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ secrets.STAGING_URL }}
            ${{ secrets.STAGING_URL }}/movies
            ${{ secrets.STAGING_URL }}/booking
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      - name: Load testing with k6
        uses: grafana/k6-action@v0.3.1
        with:
          filename: ./tests/performance/load-test.js
        env:
          K6_BASE_URL: ${{ secrets.STAGING_URL }}

  # E2E Testing
  e2e-test:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Playwright
        working-directory: ./tests/e2e
        run: |
          npm ci
          npx playwright install
      
      - name: Run E2E tests
        working-directory: ./tests/e2e
        run: npx playwright test
        env:
          BASE_URL: ${{ secrets.STAGING_URL }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: tests/e2e/playwright-report/
          retention-days: 30

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Delete old packages
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'cinebook-frontend'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
      
      - name: Delete old packages
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'cinebook-backend'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true