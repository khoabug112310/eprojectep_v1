# CineBook Application Docker Compose Configuration
# Production-ready containerized deployment

version: '3.8'

services:
  # Frontend Service (React + Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000}
        - VITE_ENVIRONMENT=${ENVIRONMENT:-production}
        - VITE_APP_VERSION=${APP_VERSION:-1.0.0}
        - VITE_ERROR_TRACKING_ENABLED=${ERROR_TRACKING_ENABLED:-true}
        - VITE_WEBSOCKET_URL=${WEBSOCKET_URL:-ws://localhost:8000}
        - VITE_PAYMENT_GATEWAY_URL=${PAYMENT_GATEWAY_URL:-http://localhost:8000/api/payments}
    container_name: cinebook-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - cinebook-network
    depends_on:
      - backend
    restart: unless-stopped
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${FRONTEND_DOMAIN:-localhost}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"

  # Backend Service (Laravel PHP-FPM + Nginx)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: cinebook-backend
    ports:
      - "${BACKEND_PORT:-8000}:80"
    networks:
      - cinebook-network
    depends_on:
      - database
      - redis
    restart: unless-stopped
    environment:
      - APP_NAME=CineBook
      - APP_ENV=${ENVIRONMENT:-production}
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=${APP_DEBUG:-false}
      - APP_URL=${APP_URL:-http://localhost:8000}
      - DB_CONNECTION=mysql
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-cinebook}
      - DB_USERNAME=${DB_USERNAME:-cinebook}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=6379
      - MAIL_MAILER=${MAIL_MAILER:-smtp}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_ENCRYPTION=${MAIL_ENCRYPTION:-tls}
    volumes:
      - backend-storage:/app/storage
      - backend-logs:/app/storage/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${API_DOMAIN:-api.localhost}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"

  # Database Service (MySQL 8.0)
  database:
    image: mysql:8.0
    container_name: cinebook-database
    ports:
      - "${DB_PORT:-3306}:3306"
    networks:
      - cinebook-network
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE:-cinebook}
      - MYSQL_USER=${DB_USERNAME:-cinebook}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    volumes:
      - database-data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/conf:/etc/mysql/conf.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb_buffer_pool_size=256M
      --max_connections=200
      --innodb_log_file_size=64M
      --query_cache_size=0
      --query_cache_type=0
      --slow_query_log=1
      --slow_query_log_file=/var/log/mysql/slow.log
      --long_query_time=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis Service (In-Memory Cache & Session Store)
  redis:
    image: redis:7-alpine
    container_name: cinebook-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - cinebook-network
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60
    volumes:
      - redis-data:/data
      - ./redis/conf:/usr/local/etc/redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Reverse Proxy & Load Balancer (Traefik)
  traefik:
    image: traefik:v3.0
    container_name: cinebook-traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    networks:
      - cinebook-network
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@cinebook.com}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --log.level=INFO
      - --accesslog=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN:-traefik.localhost}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
    profiles:
      - production

  # Monitoring Service (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: cinebook-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - cinebook-network
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Metrics Visualization (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: cinebook-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - cinebook-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=redis-datasource,mysql-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Log Management (ELK Stack - Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cinebook-elasticsearch
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - cinebook-network
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    profiles:
      - logging

  # Log Processing (Logstash)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: cinebook-logstash
    ports:
      - "${LOGSTASH_PORT:-5000}:5000"
    networks:
      - cinebook-network
    restart: unless-stopped
    volumes:
      - ./logging/logstash:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    profiles:
      - logging

  # Log Visualization (Kibana)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: cinebook-kibana
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - cinebook-network
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    profiles:
      - logging

# Networks
networks:
  cinebook-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  # Backend persistent storage
  backend-storage:
    driver: local
  backend-logs:
    driver: local
  
  # Database persistent storage
  database-data:
    driver: local
  
  # Redis persistent storage
  redis-data:
    driver: local
  
  # SSL certificates
  traefik-certs:
    driver: local
  
  # Monitoring data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  
  # Logging data
  elasticsearch-data:
    driver: local